name: Build PyInstaller Executable

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile transcript_analysis.py

      - name: Get Current Tag and Create New Version
        id: create_tag
        run: |
          # Fetch all tags to make sure we are up-to-date with remote tags
          git fetch --tags
          
          # Get the current tag or default to v0.0.0
          current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Extract major, minor, and patch numbers
          major=$(echo $current_version | cut -d. -f1 | tr -d v)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          # Increment the minor version
          new_version="v${major}.$((minor + 1))"
          
          # Check if the tag already exists in the remote repository
          if git rev-parse "$new_version" >/dev/null 2>&1; then
            echo "Tag $new_version already exists. Incrementing patch version."
            new_version="v${major}.${minor}.$((patch + 1))"
          fi
          
          # Create and push the new tag
          echo "New Version: $new_version"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $new_version
          git push origin $new_version

          # Output the new version
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_version }}
          release_name: "Release ${{ env.new_version }}"
          body: |
            Automated release for the new executable build.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Executable to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/transcript_analysis  
          asset_name: transcript_analysis
          asset_content_type: application/octet-stream

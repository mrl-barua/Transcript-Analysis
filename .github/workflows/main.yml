name: Build PyInstaller Executable

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile transcript_analysis.py

      - name: Get Current Tag and Create New Version
        id: create_tag
        run: |
          # Fetch all tags to make sure we are up-to-date with remote tags
          git fetch --tags

          # Get the current tag or default to v0.0.0
          $current_version = $(git describe --tags --abbrev=0 2>$null) 
          if (-not $current_version) { $current_version = "v0.0.0" }

          # Extract major, minor, and patch numbers
          $major, $minor, $patch = $current_version -replace '^v', '' -split '\.'

          # Increment the minor version first
          $new_version = "v$major.$($minor + 1).0"

          # Check if the tag already exists in the remote repository
          while (git rev-parse "$new_version" -quiet) {
            # If tag exists, increment the patch version
            Write-Output "Tag $new_version already exists. Incrementing patch version."
            $patch = $patch + 1
            $new_version = "v$major.$minor.$patch"
          }

          # Create and push the new tag
          Write-Output "New Version: $new_version"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag $new_version
          git push origin $new_version

          # Output the new version
          echo "new_version=$new_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.new_version }}
          release_name: "Release ${{ env.new_version }}"
          body: |
            Automated release for the new executable build.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Executable to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/transcript_analysis.exe
          asset_name: transcript_analysis.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
